I am developing a Python-based STAR SHIP simulation project with a Tkinter GUI for a single computer, inspired by "The Complete STAR SHIP: A Simulation Project." I need an engineering module to track and manage ship systems. The module should:
- Monitor systems (e.g., energy, shields, propulsion) with adjustable status (0-100).
- Respond to crew tasks (e.g., repair shields) from the crew simulation.
- Update system status in a common_data dictionary.
- Display engineering data in the GUI (e.g., progress bars).

Please provide:
- A design outline for the engineering logic.
- A sample Python implementation with system updates and Tkinter display.
- Suggestions for integrating with crew and combat modules.
- A test plan to verify system management.

Assume integration with a simulation controller.

Changes and Explanations
1. Max Energy Set to 2000
* Feedback: Set max_energy to 2000 in simulation.py for testing.
* Change: Updated max_energy default to 2000 in __init__. Already matches the feedback since it’s in the shared common_data.
2. Energy Balance for Warp
* Feedback: Warp at * 10 (810 units/second for Warp 9) or * 5 (405 units/second) as fallback.
* Change: Modified warp cost from factor**2 * 10 (810 at Warp 9 was correct but quadratic) to factor * 90 (linear, still 810 at Warp 9). Added fallback logic: if full cost isn’t affordable, try half cost (factor * 45).
* Code: Updated in update() under propulsion logic.
3. Power Surge Event
* Feedback: 5% chance at >95% energy, -50 energy, eng['surge'] = True, logged to Column 3.
* Change: Adjusted condition from allocation-based to energy-based (eng["energy"] > eng["max_energy"] * 0.95). Moved surge = False reset outside the event to ensure it’s cleared each tick unless triggered.
* Code: Updated in update().
4. Shield Overload Event
* Feedback: 10% chance if alloc > 80, health < 20, sets shields to 0, logged.
* Change: Already implemented correctly in the original code. No changes needed.
5. Propulsion Strain Event
* Feedback: 5% chance if warp > 7 for >10 seconds, -10 health, logged.
* Change: Added warp_duration to track time in warp. Added event logic to reduce system_health["propulsion"] by 10.
* Code: Added warp_duration in __init__, incremented/reset in update(), and implemented event.
6. Combat Surge Integration
* Feedback: eng['surge'] causes 50% phaser miss chance, log for UI.
* Change: surge flag is already set by power surge. No additional logic needed here; Combat thread can check eng["surge"] directly. Logging happens in the surge event.
* Note: Combat thread needs to implement the 50% miss chance based on common_data["engineering"]["surge"].
7. Tick Rate and Regeneration
* Feedback: 1 tick/second aligns regen (5 units/second), warp (810 units/second), repairs (5%/second).
* Change: Energy regen was correct at 5 units/tick. Simplified shield regen to a flat 5%/tick (removed allocation-based formula for simplicity and to match 5%/second). Repairs already at 5%/tick via crew tasks.
* Code: Updated shield regen in update().
8. Sim Time
* Feedback: sim_time adoption is perfect, no datetime.now().
* Change: Already using sim_time correctly. No changes needed.

Additional Notes
* Combat Sync: The surge flag is ready for Combat to use. Confirm with the Combat thread how they’ll access common_data["engineering"]["surge"] and apply the 50% miss chance.
* UI Logging: All events log to common_data["debug"] as dictionaries, matching Column 3 expectations.
* Testing Order: Shield Overload is already in; test it first, then Combat surge integration.