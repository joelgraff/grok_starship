Engineering Module Manual Testing Plan via Simulation UI

Setup
1. Launch the Simulation: Start your PyGame/PyQt application with the Engineering module integrated (now split into modules/engineering/engineering_base.py, energy_manager.py, propulsion_manager.py, shields_manager.py, command_handler.py, status_reporter.py).
2. Initial State: Confirm the starting values in the UI match the defaults:
   - Energy: 1000/2000
   - Warp Energy: 1500/1500
   - Shields: 100%
   - Allocations: Shields 30%, Weapons 20%, Propulsion 40%, Reserve 10%
   - Impulse Speed: 50%
   - Warp Factor: 0
   - System Health: All 100%
3. Command Entry: Use the UI’s command input mechanism (e.g., text box or console) to send commands.
4. UI Check: Verify the UI displays Warp Energy (e.g., progress bar or numeric label) alongside main Energy (pending UI thread updates).

Test Scenarios
For each test, enter the command, observe the UI output (via displayed values or debug log), and check common_data["debug"] for expected messages. Run the simulation for a few ticks after each command to see update effects.

1. Boost Shields
   - Command: eng boost_shields 50
   - Expected Output: UI shows Shields allocation at 50%, total allocations sum to 100% (e.g., Reserve decreases). Warp Energy unchanged.
   - Debug Log: "ENG: Shields boosted by 50%"
   - Tick Check: Run a few ticks; Shields allocation remains 50%, main energy regenerates +5/tick, warp energy regenerates +10/tick.

2. Reroute Power
   - Command: eng reroute_power propulsion
   - Expected Output: Propulsion allocation increases to 60%, other allocations adjust proportionally.
   - Debug Log: "ENG: Power rerouted to propulsion"
   - Tick Check: Impulse speed increases to 100% (capped, 60% * 2). Warp Energy unaffected.

3. Set Reserve
   - Command: eng reserve 20
   - Expected Output: Reserve allocation set to 20%, other allocations scale to total 100%.
   - Debug Log: "ENG: Reserve set to 20%"
   - Tick Check: Allocations remain stable, Warp Energy unaffected.

4. Warp Engagement
   - Command: eng warp 5
   - Expected Output: Warp factor set to 5, impulse speed drops to 0, UI shows warp energy at 1500 initially, main energy unchanged.
   - Debug Log: "ENG: Warp set to 5, cost 375 warp energy/tick"
   - Tick Check: After 1 tick, warp energy decreases by 375 (to 1125), warp_duration increases to 1. Warp sustains for ~4 ticks (1500 -> 1125 -> 750 -> 375 -> 0) without refueling, or ~15-20 seconds with refueling (see Test 8). If disengaged, debug log shows "ENG: Warp disengaged - insufficient warp energy", impulse speed reverts to 80% (40% propulsion * 2). Confirm warp energy updates in UI (once implemented).

5. Repair System
   - Setup: Manually reduce shields health (e.g., via test command) to 50%.
   - Command: eng repair shields
   - Expected Output: Debug log shows "ENG: Repair task queued for shields"
   - Tick Check: Shields health increases by 5% per tick until 100%, task removed from crew_tasks. Warp Energy unaffected.

6. Set Max Energy
   - Command: eng set_max_energy 3000
   - Expected Output: Main energy capacity updates to 3000, current energy ≤ new max (e.g., 1000).
   - Debug Log: "ENG: Max energy set to 3000"
   - Tick Check: Main energy regenerates toward 3000 at +5/tick. Warp Energy unaffected.

7. Event Triggers
   - Power Surge:
     - Setup: Set main energy to 1900+ (e.g., via test command).
     - Action: Run multiple ticks.
     - Expected Output: ~5% chance per tick of main energy dropping by 50, debug log shows "ENG: Power surge detected -50 energy", surge flag toggles. Warp Energy unaffected.
   - Shield Overload:
     - Setup: Set shields allocation >80%, health <20%.
     - Action: Run ticks.
     - Expected Output: ~10% chance of shields dropping to 0, debug log shows "ENG: Shield overload—resetting".
   - Propulsion Strain:
     - Setup: Set warp to 8, run >10 ticks (use refuel_warp if needed).
     - Expected Output: ~5% chance of propulsion health dropping by 10, debug log shows "ENG: Propulsion strain—health reduced".

8. Warp Energy Management
   - Command 1: eng set_max_warp_energy 3000
   - Expected Output: Warp energy capacity updates to 3000, current warp energy ≤ new max (e.g., 1500).
   - Debug Log: "ENG: Max warp energy set to 3000"
   - Tick Check: Warp energy regenerates toward 3000 at +10/tick.
   - Command 2: eng refuel_warp 1000
   - Expected Output: Warp energy increases by 1000 (to 2500/3000), capped at max.
   - Debug Log: "ENG: Warp energy refueled by 1000"
   - Tick Check: Run Warp 5 (Test 4); confirm longer duration (~8 ticks: 2500 -> 2125 -> ... -> 250). Verify UI warp energy updates (once implemented).

Observations
- UI Feedback: Confirm warp energy display (pending UI update) reflects changes. Verify energy, allocations, and other values update correctly.
- Debug Logs: Check common_data["debug"] for expected messages, especially for warp and refueling.
- Consistency: Ensure allocations sum to 100%, energy/warp energy stay within bounds, health caps at 100%, impulse speed matches propulsion * 2 after warp.
- Module Integration: Verify all split files (engineering_base, energy_manager, etc.) work together without errors.

Tips for Testing
- Simulation Speed: Slow tick rate (e.g., 0.5 ticks/second) for easier observation.
- Debug Window: Use a temporary print(common_data["debug"]) if UI log isn’t ready.
- Manual Tweaks: Set warp_energy or health via debug commands for edge cases.
- Warp Duration: If Warp 5 lasts <10 or >30 seconds, adjust max_warp_energy (e.g., 5000) or warp_cost (*50 for longer).